#!/usr/bin/env python
import os
import rospy
import socket
import SocketServer
import SimpleHTTPServer
from urlparse import urlparse, parse_qsl
import rospkg
import actionlib
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
import tf2_ros

rospy.init_node('web_server_node')
rospy.loginfo('Inside web_server script')
rospack = rospkg.RosPack()

HOST = socket.gethostname()
PORT = 8080
address = ("", PORT)
os.chdir(rospack.get_path('robert_beverage') + '/web_server')
SUCCESS_PATH = "/success.html"
FAIL_PATH = "/fail.html"

client = actionlib.SimpleActionClient('/public/robot/move_base/goal',MoveBaseAction)
client.wait_for_server()


def isfloat(value):
    try:
        float(value)
        return True
    except ValueError:
        return False


def get_coordinates():
    while True:
        try:
            trans = tfBuffer.lookup_transform('map', 'base_link', rospy.Time())
        except (tf2_ros.LookupException, tf2_ros.ConnectivityException,
                tf2_ros.ExtrapolationException):
            rate.sleep()
            continue
        else:
            break
    return {'x':trans.transform.translation.x,
            'y':trans.transform.translation.y}


def move_base(x, y):
    cur_coor = get_coordinates()
    goal = MoveBaseGoal()
    goal.target_pose.header.frame_id = "map"
    goal.target_pose.header.stamp = rospy.Time.now()
    goal.target_pose.pose.position.x = cur_coor['x'] - x
    goal.target_pose.pose.position.y = cur_coor['y'] - y
    goal.target_pose.pose.orientation.w = 1.0
    client.send_goal(goal)
    wait = client.wait_for_result()
    if not wait:
        rospy.logerr("Action server not available!")
        rospy.signal_shutdown("Action server not available!")
    else:
        return client.get_result()


class RequestHandler(SimpleHTTPServer.SimpleHTTPRequestHandler):
    def do_GET(self):
        if self.path.startswith("/beverage?"):
            parsed = urlparse(self.path)
            params = dict(parse_qsl(parsed.query))
            if len(params) != 2:
                rospy.logerr("Invalid arguments")
                self.path = FAIL_PATH
            else:
                try:
                    params['x'] = float(params['x'])
                    params['y'] = float(params['y'])
                except ValueError:
                    if not isfloat(params['x']):
                        rospy.logerr("x value not valid")
                    else:
                        rospy.logerr("y value not valid")
                    self.path = FAIL_PATH
                except KeyError:
                    if 'x' not in params:
                        rospy.logerr("x value doesn't exist")
                    else:
                        rospy.logerr("y value doesn't exist")
                    self.path = FAIL_PATH
                else:
                    result = move_base(params['x'], params['y'])
                    self.path = SUCCESS_PATH
        elif self.path.startswith("/styles") or self.path.startswith("/images"):
            pass
        else:
            rospy.logerr("Invalid url")
            self.path = FAIL_PATH
        return SimpleHTTPServer.SimpleHTTPRequestHandler.do_GET(self)


SocketServer.TCPServer.allow_reuse_address = True
httpd = SocketServer.TCPServer(address, RequestHandler)

rospy.loginfo("serving at port %s", PORT)
httpd.serve_forever()
httpd.shutdown()
